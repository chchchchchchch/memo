
> 24. Avoid software. The problem with software is that everyone has it.
> 22. Make your own tools. Hybridize your tools in order to build unique things.
>     Even simple tools that are your own can yield entirely new avenues of exploration.
>     Remember, tools amplify our capacities, so even a small tool can make a big difference.
>     [^]{http://www.manifestoproject.it/bruce-mau}

> XX.
> 00.

 imagining futures

  software  dreams
      ----  ......
       wet  ......
  fantastic

 =============================================================================

 responsive.my.ass

----

 B.BRECHT: Licht an. Rauchen (vgl. von Gehlen)

> Ich behaupte [...], daß ein einziger Mann mit einer Zigarre
> im Parkett einer Shakespeare-Aufführung den Untergang
> der abendländischen Kunst herbeiführen könnte. [...]
> Ich würde gern sehen, wenn das Publikum bei unseren Aufführungen
> rauchen dürfte
> [*](http://kritische-ausgabe.de/hefte/werkstatt/valerius.pdf)

----

  Gated platforms -> http://automatist.org/blog/rip-rss

  http://en.wikipedia.org/wiki/Gated_community
  http://en.wikipedia.org/wiki/Fortification
  http://en.wikipedia.org/wiki/Privately_owned_public_space

----

  aeon.co/essays/innovation-is-overvalued-maintenance-often-matters-more
  -> en.wikipedia.org/wiki/Micro-innovation
  new <-> adapted ?

----

  a zine as a frontend
  computing culture

----

  Felix Stalder:
  Kultur der Digitalität

  http://www.suhrkamp.de/download/Blickinsbuch/9783518126790.pdf

> Diese sind in der Alltagserfahrung jedoch kaum sichtbar
> und werden daher oft ignoriert, ohne dass sie deswegen
> verschwinden oder an Bedeutung verlieren.

----

  particularity + separation?
  partial perspectives: does something partial require
  separation/division? if not: where does the part come from?

----

% SITUATED
  --------

--
  en.wikipedia.org/wiki/Situated_cognition

> Situated cognition is a theory that posits that knowing is inseparable
> from doing by arguing that all knowledge is situated in activity bound
> to social, cultural and physical contexts.

> [...] situativity theorists suggest
> a model of knowledge and learning
> that requires thinking on the fly
> rather than the storage and retrieval
> of conceptual knowledge.

> Therefore, learning is seen in terms of an individual's
> increasingly effective performance across situations
> rather than in terms of an accumulation of knowledge,
> since what is known is co-determined by the agent and the context.

--

> Harding nennt dieses notwendigerweise vielfältige Begehren ein Bedürfnis
> nach dem Projekt einer Nachfolgewissenschaft und ein postmodernes Beharren
> auf irreduzibler Differenz und radikaler Vielfalt lokalen Wissens.
> [@[p.79]haraway:1995:neuerfindung]

> Was wir aber dringend brauchen, ist ein Netzwerk erdumspannender
> Verbindungen, das die Fähigkeit einschließt, zwischen sehr verschiedenen
> -- und nach Macht differenzierten -- Gemeinschaften Wissen zumindestens
> teilweise zu übersetzen.
> [@[p.79]haraway:1995:neuerfindung]

> Wissenschaft war immer eine Suche nach Übersetzung, Verwandlung
> und Beweglichkeit von Bedeutungen und nach Universalität --
> die ich Reduktionismus nenne, wenn eine Sprache (wessen wohl)
> als Maßstab für alle Übersetzungen und Verwandlungen aufgezwungen
> werden muß.
> [@[p.79]haraway:1995:neuerfindung]

> Die Alternative zum Relativismus ist allerdings nicht Totalisierung [...] .
> Die Alternative zum Relativismus ist eine Vielfalt partialen, verortbaren,
> kritischen Wissens, das die Möglichkeit von Netzwerken aufrechterhält,
> die in der Politik Solidarität und in der Epistemologie
> Diskussionszusammenhänge genannt werden.
> [@[p.84]haraway:1995:neuerfindung]

> Positionierung ist daher die entscheidende wissenbegründende Praktik,
> die wie so viele wissenschaftliche und philosophische Diskurse des
> Westens auch um die Metaphorik der Vision herum organisiert ist.
> Positionierung impliziert Verantwortlichkeit für die Praktiken,
> die uns Macht verleihen.
> [@[p.89]haraway:1995:neuerfindung]

> Die neuen Wissenschaften, die der Feminismus begehrt, sind Wissenschaften
> und Politiken des Interpretation, der Übersetzung, des Stotterns und
> des partiell Verstandenen.
> [@[p.89ff]haraway:1995:neuerfindung]

> Unsere Suche nach Partialität ist kein Selbstzweck, sondern handelt von
> Verbindungen und unerwarteten Eröffnungen, die durch situiertes Wissen
> möglich werden.
> [@[p.91]haraway:1995:neuerfindung]

--

[*](http://shirky.com/writings/herecomeseverybody/situated_software.html)

> designed for use by a specific social group,
> rather than for a generic set of "users"

> Making form-fit software for a small group of users has typically
> been the province of banks and research labs -- because of the costs involved

> We've been killing conversations about software with "That won't scale"
> for so long we've forgotten that scaling problems aren't inherently fatal.
> The N-squared problem is only a problem if N is large, and in social
> situations, N is usually not large. A reading group works better with 5
> members than 15; a seminar works better with 15 than 25, much less 50,
> and so on.

> If by programmer we mean "people who write code" instead of
> "people who are paid to write code", the number of programmers
> is going to go up, way up, by 2015, even though many of the
> people using perl and JavaScript and Flash don't think of
> themselves as programmers.

> Situated software isn't a technological strategy so much as an attitude
> about closeness of fit between software and its group of users,
> and a refusal to embrace scale, generality or completeness as
> unqualified virtues.

> Allowing the user to customize the interface of a Web site might
> make it more useful, but it doesn't make it any more personal than
> the ATM putting your name on the screen while it spits out your money.

make the computer personal again?

> Situated software, by contrast, doesn't need to be personalized
> -- it is personal from its inception.

> Small, purpose-built apps have always existed, of course -- 
> learning BASIC used to be a rite of passage for PC owners,
> and data intensive institutions like investment banks and
> research labs write software for small groups of users.
> Now, though, the combination of good tools, talented users
> and the internet as a social stage makes the construction
> of such software simpler, the quality of the result better,
> and the delivery to the users as simple as clicking a link.
> The design center of a dozen users, so hard to serve in the
> past, may become normal practice.

> Expectations of longevity, though, are the temporal version
> of scale -- we assume applications should work for long
> periods in part because it costs so much to create them.
> Once it's cheap and easy to throw together an application,
> though, that rationale weakens. Businesses routinely ask
> teams of well-paid people to put hundreds of hours of work
> creating a single PowerPoint deck that will be looked at in
> a single meeting. The idea that software should be built for
> many users, or last for many years, are cultural assumptions
> not required by the software itself.

> This, strangely, is a kind of progress,
> not because situated software will replace
> other kinds of applications, but because it
> mostly won't. For all the value we get out
> of the current software ecosystem, it doesn't
> include getting an application built for a handful
> of users to use for a few months. Now, though,
> I think we're starting to see a new software niche,
> where communities get form-fit tools for very particular
> needs, tools that fail most previous test of design quality
> or success, but which nevertheless function well, because
> they are so well situated in the community that uses them.

de-generic, de-generalise
scalability?

--

> Knowledge generated through experience is called knowledge
> "a posteriori", meaning afterwards. The pure existence of
> a term like "a posteriori" means this also has a counterpart.
> In this case, that is knowledge "a priori", meaning before.
> [*](https://en.wikipedia.org/wiki/Knowledge#Situated_knowledge)

-

> In computing, a situational application is "good enough"
> software created for a narrow group of users with 
> a unique set of needs.
> [*](https://en.wikipedia.org/wiki/Situational_application)

-------

% INTERNATIONALIZATION

> The questions of "otherness" are rarely posed in relation to
> software. This is because universality figures so large in
> software. Software makes historically and materially specific
> claims to universality (think of Java's "Write once, run anywhere"
> promise). This tends to push questions of otherness in software
> aside. By virtue of the notions of universality attached to
> numbering systems (such as decimal and binary), to computation
> (Universal Turing Machine), and to global technoculture itself,
> software seems virulently universal. When figures of otherness
> appear around software, they tend to be pathological.
> Pathological software forms such as viruses, worms, trojan horses,
> or even bugs are one facet of otherness marked in software.
> Much of the architecture and design, as well as much everyday
> work, pivots on security measures meant to regulate the entry and
> presence of these others, and at the same time to permit software
> to translate smoothly between institutional, political, linguistic
> and economic contexts.
> [@[p.153]mackenzie:2006:internationalization]

> Technically universal yet abstractly local,
> commercial internationalization focuses
> on consumption and use of software,
> not its distribution or production
> [@[p.155]mackenzie:2006:internationalization]


% INTERFACE

> In computing, interfaces link software and hardware to each other
> and to their human users or other sources of data. A typology of
> interfaces thus reads:
> 
> 1. hardware that connects users to hardware; typically input/output
>    devices such as keyboards or sensors, and feedback devices such
>    as screens or loudspeakers;
> 2. hardware that connects hardware to hardware; such as network
>    interconnection points and bus systems;
> 3. software, or hardware-embedded logic, that connects hardware to
>    software; the instruction set of a processor or device drivers,
>    for example.
> 4. specifications and protocols that determine relations between 
>    software and software, that is, application programming
>    interfaces (APIs);
> 5. symbolic handles, which, in conjunction with (a), make software
>    accessible to users; that is, "user interfaces", often mistaken
>    in media studies for "interface" as a whole.
> [@[p.155]cramerfuller:2006:interface]

















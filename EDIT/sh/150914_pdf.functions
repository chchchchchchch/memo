# =========================================================================== #
# SHARED
# =========================================================================== #

 function getFile() {
# --------------------------------------------------------------------------- #
# MAKE LOCAL IF NECESSARY
# --------------------------------------------------------------------------- #

  SOURCE=$1
  TARGET=$2

  echo $SOURCE
  echo $TARGET

  IFHTTP=`echo $SOURCE | grep "http.\?://" | wc -l`
  if [ $IFHTTP -ge 1 ]; then
       URL=$SOURCE;
       RESPONSE=`curl -s -o /dev/null -IL -w "%{http_code}" $URL`
       if [ $RESPONSE == '200' ]; then
            wget --no-check-certificate \
                 -O $TARGET $URL > /dev/null 2>&1
            SUCCESS="YES"
       else
            echo "$URL does not exist! Skipping."
            SUCCESS="NO"
       fi
  else
       if [ `ls $SOURCE 2>/dev/null | wc -l` -le 0 ];then
       echo "no valid input provided"
       SUCCESS="NO"
       else
       SUCCESS="YES"
       cp $SOURCE $TARGET
       fi
  fi

}

# =========================================================================== #


# --------------------------------------------------------------------------- #

function INCLUDE() {

# TODOTODO: check, check, debug
# mdsh2src $PARAMETERSWITHOUTFUNCTIONS # TODOTODO

  echo "INCLUDE STARTS ====================================================="

# EXTRACT OPTIONAL PARAMETERS
# ---------------------------------------------------------
  FUNCTIONSHERE=`echo $* | sed 's/ /\n/g' | #
                 grep "\.functions$" | tail -n 1`

  if [ `echo $FUNCTIONSHERE | wc -c` -gt 1 ];then
  PARAMETERSWITHOUTFUNCTIONS=`echo $* | #
                              sed 's/ /\n/g' | #
                              grep -v "\.functions$"`                                    # TODO: BETTER

# ATTACH FUNCTIONS TO MAIN FUNCTIONS
# ---------------------------------------------------------
  if [ `ls $FUNCTIONSHERE 2>/dev/null | wc -l` -gt 0 ];then

   FID=`date +%s%N`
 # ATTACH AND MARK FUNCTIONS
   echo "#  -- ${FID} -- START" >> $FUNCTIONS
   cat  $FUNCTIONSHERE          >> $FUNCTIONS
   echo "#  -- ${FID} -- END"   >> $FUNCTIONS
   FUNCTIONSADDED="YES"
 # SAVE FUNCTION ID (AS VARIABLE MAY BE OVERWRITTEN)
   echo $FID >> ${TMPID}.fid
   fi
   else
   FUNCTIONSADDED="NO"
  fi

# PROCESS INPUT !!!!!
# --------------------------------------------------------
  mdsh2src $*

# REMOVE ADDED FUNCTIONS
# --------------------------------------------------------
  if [ -f ${TMPID}.fid ]; then

# LOAD LATEST FUNCTION ID
  FID=`tail -n 1 ${TMPID}.fid`
# REMOVE FROM FUNCTIONS
  sed -i "/${FID} -- START$/,/${FID} -- END$/d" ${FUNCTIONS}
# REMOVE FROM SAVED FUNCTIONS
  sed -i "/$FID/d" ${TMPID}.fid
# RELOAD FUNCTIONS
  source $FUNCTIONS

  fi

  echo "INCLUDE ENDS  ======================================================"
}

# --------------------------------------------------------------------------- #










function UNCITE() {

  DUMP=${TMPID}.`echo $RANDOM$RANDOM | cut -c 1-4`.mdsh

  INPUT=`echo $* | cut -d " " -f 1`; echo "input is: "$INPUT
  LINES=`echo $* | sed "s/ /\n/g"             | # SPACES TO NEWLINES
         sed "s/[^0-9\\-]//g"                 | # REMOVE ALL EXCEPT NUMS AND -
         grep -v "^[ ]*$"                     | # REMOVE EMPTY
         sed -e '/^[0-9]\+-*[0-9]*$/s/^/X/g'  | # MARK LINE OPTION 
         grep "^X" | sed 's/^X//' | tail -n 1`  # SELECT LINE OPTION
  if [ `echo $LINES | wc -c` -gt 1 ]; then      # IF LINE OPTION IS SET
        echo "lines: $LINES"
        LINES=`echo $LINES | sed 's/-/,/'`
        SELECTLINES="sed -n \"${LINES}p\" "
  else                                          # IF LINE OPTION IS NOT SET
        SELECTLINES="tee"
  fi
 
  IFHTTP=`echo $INPUT | grep "http.\?://" | wc -l`
  if [ $IFHTTP -ge 1 ]; then
       URL=$INPUT; NAME=`echo $INPUT | md5sum | cut -c 1-10`
       RESPONSE=`curl -s -o /dev/null -IL -w "%{http_code}" $URL`
       if [ $RESPONSE == '200' ]; then
           #wget --no-check-certificate \
           #     -O $DUMP $URL > /dev/null 2>&1

            wget -O - -o /dev/null $URL | #
            eval "$SELECTLINES"         | #
            sed 's/^> //' > $DUMP
            mdsh2src $DUMP 1-1000

       else
            echo "$URL does not exist! Skipping."
       fi
  else
       MDSH=$INPUT
       if [ `ls $MDSH 2>/dev/null | wc -l` -le 0 ];then
       echo "no valid input provided"
       else
       RUN="YES"

       fi
  fi

}

# --------------------------------------------------------------------------- #

function SRC() {

 #write2src "link: $*"
 #echo "link: $*"
  sleep 0 
 
}

# --------------------------------------------------------------------------- #
# INJECT WHATEVER

function INJECT() {

   write2src "$*"

}

# --------------------------------------------------------------------------- #
# CREATE AND INSERT PAGE SPREAD (SPECIFIC SRC)

function SPREAD() {

  CROP=10.63 # 3mm in px

  SVGSRC=$1
  SVGTMP=${TMPID}`echo $SVGSRC | md5sum | cut -c 1-4`.svg
     PDF=${TMPID}`echo $SVGSRC | md5sum | cut -c 1-4`.pdf

  SPRTMP=$TMPID.`echo $SVGTMP | md5sum | cut -c 1-4`.tmp

  ISSVG=`echo $SVGSRC | grep "\.svg$" | wc -l`
  if [ $ISSVG -gt 0 ]; then

    getFile $SVGSRC $SVGTMP
    echo $PDF

    if [ "X$SUCCESS" == "XYES" ]; then

    CANVASWIDTH=`sed ":a;N;\$!ba;s/\n//g" $SVGTMP | # SVG WITHOUT LINEBREAKS
                 sed 's/width=/\n&/g'             | # EXTRACT WIDTH
                 grep "^width="                   | # EXTRACT WIDTH
                 cut -d "\"" -f 2                 | # EXTRACT WIDTH VALUE
                 head -n 1`                         # FIRST WIDTH ONLY
    LAYERNAMES=`sed ":a;N;\$!ba;s/\n//g" $SVGTMP  | # SVG WITHOUT LINEBREAKS
                sed 's/nkscape:label/\n&/g'       | # EXTRACT LAYER NAME
                grep "^nkscape:label"             | # EXTRACT LAYER NAME
                cut -d "\"" -f 2                  | # EXTRACT LAYER NAME
                grep -v XX_                       | # IGNORE XX_LAYERS
                sort -u`                            # SORT AND UNIQ

    BFOO=NL`echo ${RANDOM} | cut -c 1`F00
    SFOO=SP`echo ${RANDOM} | cut -c 1`F0O
  # ----------------------------------------------------------------------- #
  # MOVE LAYERS ON SEPARATE LINES (TEMPORARILY; EASIFY PARSING LATER ON)
  # ----------------------------------------------------------------------- #
    sed ":a;N;\$!ba;s/\n/$BFOO/g" $SVGTMP | # REMOVE ALL LINEBREAKS (BUT SAVE)
    sed "s/ /$SFOO/g"                     | # REMOVE ALL SPACE (BUT SAVE)
    sed 's/<g/4Fgt7RfjIoPg7/g'            | # PLACEHOLDER FOR GROUP OPEN
    sed ':a;N;$!ba;s/\n/ /g'              | # REMOVE ALL NEW LINES
    sed 's/4Fgt7RfjIoPg7/\n<g/g'          | # RESTORE GROUP OPEN + NEWLINE
    sed '/groupmode="layer"/s/<g/4Fgt7R/g'| # PLACEHOLDER FOR LAYERGROUP OPEN
    sed ':a;N;$!ba;s/\n/ /g'              | # REMOVE ALL LINEBREAKS
    sed 's/4Fgt7R/\n<g/g'                 | # RESTORE LAYERGROUP OPEN + NEWLINE
    sed 's/<\/svg>//g'                    | # REMOVE SVG CLOSE
    sed 's/display:none/display:inline/g' | # MAKE VISIBLE EVEN WHEN HIDDEN
    tee > ${SPRTMP}                         # WRITE TO TEMPORARY FILE
  # ----------------------------------------------------------------------- #
  # WRITE LAYERS TO SEPARATE FILES AND TRANSFORM TO PDF 
  # ----------------------------------------------------------------------- #
    COUNT=1 
    for LAYERNAME in $LAYERNAMES
     do
        for PAGE in 1 2
        do
            if [ $PAGE -eq 1 ]; then
                 XSHIFT=-$CROP
            else
                 XSHIFT=-`python -c "print $CANVASWIDTH - $CROP"`
            fi
            TRANSFORM="transform=\"translate($XSHIFT,0)\""
            NUM=`echo 0000$COUNT | rev | cut -c 1-4 | rev`
            LNAME=`echo $LAYERNAME | md5sum | cut -c 1-6`
            head -n 1 ${SPRTMP}    | # THE HEADER
            sed "s/$BFOO/\n/g"     | # RESTORE ORIGINAL LINEBREAKS
            sed "s/$SFOO/ /g"      | # RESTORE ORIGINAL SPACES
            tee                    >   ${TMPID}_${NUM}_${LNAME}.svg
            echo "<g $TRANSFORM>"  >>  ${TMPID}_${NUM}_${LNAME}.svg
            grep "inkscape:label=\"$LAYERNAME\"" ${SPRTMP} | #
            sed "s/$BFOO/\n/g"     | # RESTORE ORIGINAL LINEBREAKS
            sed "s/$SFOO/ /g"      | # RESTORE ORIGINAL SPACES
            tee                    >>  ${TMPID}_${NUM}_${LNAME}.svg
            echo "</g>"            >>  ${TMPID}_${NUM}_${LNAME}.svg
            echo "</svg>"          >>  ${TMPID}_${NUM}_${LNAME}.svg

            inkscape --export-pdf=${TMPID}_${NUM}_${LNAME}.pdf \
                     --export-text-to-path \
                     ${TMPID}_${NUM}_${LNAME}.svg
            rm ${TMPID}_${NUM}_${LNAME}.svg
            COUNT=`expr $COUNT + 1`
        done
    done
  # ----------------------------------------------------------------------- #
  # MAKE MULTIPAGE PDF
  # ----------------------------------------------------------------------- #
    pdftk ${TMPID}_*.pdf cat output $PDF
  # ----------------------------------------------------------------------- #
  # CLEAN UP 
  # ----------------------------------------------------------------------- #
    rm ${SPRTMP} ${TMPID}_*.pdf $SVGTMP




    fi
  fi
}

# --------------------------------------------------------------------------- #

function TITLE() {

  write2src ""
  write2src "starter: $*"
  write2src ""

}

# --------------------------------------------------------------------------- #



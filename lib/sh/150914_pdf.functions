# --------------------------------------------------------------------------- #
# S H A R E D
# =========================================================================== #
  SHORTURLBASE="http://lfkn.de"

# --------------------------------------------------------------------------- #

  function svglayers2pdfpages() {

   CROP=10.63 # 3mm in px

     SVGLAYER=$1
     PDFPAGES=$2
     SUPERTMP=${TMPID}.`echo $SVGL | md5sum | cut -c 1-4`.tmp
 
     CANVASWIDTH=`sed ":a;N;\$!ba;s/\n//g" $SVGLAYER | # SVG WITHOUT LINEBREAKS
                  sed 's/width=/\n&/g'               | # EXTRACT WIDTH
                  grep "^width="                     | # EXTRACT WIDTH
                  cut -d "\"" -f 2                   | # EXTRACT WIDTH VALUE
                  head -n 1`                           # FIRST WIDTH ONLY
      LAYERNAMES=`sed ":a;N;\$!ba;s/\n//g" $SVGLAYER | # SVG WITHOUT LINEBREAKS
                  sed 's/nkscape:label/\n&/g'        | # EXTRACT LAYER NAME
                  grep "^nkscape:label"              | # EXTRACT LAYER NAME
                  cut -d "\"" -f 2                   | # EXTRACT LAYER NAME
                  grep -v XX_                        | # IGNORE XX_LAYERS
                  sort -u`                             # SORT AND UNIQ
 
     BFOO=NL`echo ${RANDOM} | cut -c 1`F00
     SFOO=SP`echo ${RANDOM} | cut -c 1`F0O
   # ----------------------------------------------------------------------- #
   # MOVE LAYERS ON SEPARATE LINES (TEMPORARILY; EASIFY PARSING LATER ON)
   # ----------------------------------------------------------------------- #
     sed ":a;N;\$!ba;s/\n/$BFOO/g" $SVGLAYER | # REMOVE ALL LINEBREAKS (BUT SAVE)
     sed "s/ /$SFOO/g"                       | # REMOVE ALL SPACE (BUT SAVE)
     sed 's/<g/4Fgt7RfjIoPg7/g'              | # PLACEHOLDER FOR GROUP OPEN
     sed ':a;N;$!ba;s/\n/ /g'                | # REMOVE ALL NEW LINES
     sed 's/4Fgt7RfjIoPg7/\n<g/g'            | # RESTORE GROUP OPEN + NEWLINE
     sed '/groupmode="layer"/s/<g/4Fgt7R/g'  | # PLACEHOLDER FOR LAYERGROUP OPEN
     sed ':a;N;$!ba;s/\n/ /g'                | # REMOVE ALL LINEBREAKS
     sed 's/4Fgt7R/\n<g/g'                   | # RESTORE LAYERGROUP OPEN + NEWLINE
     sed 's/<\/svg>//g'                      | # REMOVE SVG CLOSE
     sed 's/display:none/display:inline/g'   | # MAKE VISIBLE EVEN WHEN HIDDEN
     tee > ${SUPERTMP}                         # WRITE TO TEMPORARY FILE
   # ----------------------------------------------------------------------- #
   # WRITE LAYERS TO SEPARATE FILES AND TRANSFORM TO PDF 
   # ----------------------------------------------------------------------- #
     COUNT=1 
     for LAYERNAME in $LAYERNAMES
      do
         for PAGE in 1 2
         do
             if [ $PAGE -eq 1 ]; then
                  XSHIFT=-$CROP
             else
                  XSHIFT=-`python -c "print $CANVASWIDTH - $CROP"`
             fi
             TRANSFORM="transform=\"translate($XSHIFT,0)\""
             NUM=`echo 0000$COUNT | rev | cut -c 1-4 | rev`
             LNAME=`echo $LAYERNAME | md5sum | cut -c 1-6`
             head -n 1 ${SUPERTMP}    | # THE HEADER
             sed "s/$BFOO/\n/g"     | # RESTORE ORIGINAL LINEBREAKS
             sed "s/$SFOO/ /g"      | # RESTORE ORIGINAL SPACES
             tee                    >   ${TMPID}_${NUM}_${LNAME}.svg
             echo "<g $TRANSFORM>"  >>  ${TMPID}_${NUM}_${LNAME}.svg
             grep "inkscape:label=\"$LAYERNAME\"" ${SUPERTMP} | #
             sed "s/$BFOO/\n/g"     | # RESTORE ORIGINAL LINEBREAKS
             sed "s/$SFOO/ /g"      | # RESTORE ORIGINAL SPACES
             tee                    >>  ${TMPID}_${NUM}_${LNAME}.svg
             echo "</g>"            >>  ${TMPID}_${NUM}_${LNAME}.svg
             echo "</svg>"          >>  ${TMPID}_${NUM}_${LNAME}.svg
 
             inkscape --export-pdf=${TMPID}_${NUM}_${LNAME}.pdf \
                      --export-text-to-path \
                      ${TMPID}_${NUM}_${LNAME}.svg
             rm ${TMPID}_${NUM}_${LNAME}.svg
             COUNT=`expr $COUNT + 1`
         done
     done
   # ----------------------------------------------------------------------- #
   # MAKE MULTIPAGE PDF
   # ----------------------------------------------------------------------- #
     pdftk ${TMPID}_*.pdf cat output $PDFPAGES
   # ----------------------------------------------------------------------- #
   # CLEAN UP
   # ----------------------------------------------------------------------- #
     rm ${SUPERTMP} ${TMPID}_*.pdf $SVGLAYER
 
  }

# --------------------------------------------------------------------------- #



# =========================================================================== #




# --------------------------------------------------------------------------- #

function INCLUDE() {

# TODOTODO: check, check, debug
# mdsh2src $PARAMETERSWITHOUTFUNCTIONS # TODOTODO

  echo "INCLUDE STARTS ====================================================="

# EXTRACT OPTIONAL PARAMETERS
# ---------------------------------------------------------
  FUNCTIONSHERE=`echo $* | sed 's/ /\n/g' | #
                 grep "\.functions$" | tail -n 1`

  if [ `echo $FUNCTIONSHERE | wc -c` -gt 1 ];then
  PARAMETERSWITHOUTFUNCTIONS=`echo $*        | #
                              sed 's/ /\n/g' | #
                              grep -v "\.functions$"`                                    # TODO: BETTER

# ATTACH FUNCTIONS TO MAIN FUNCTIONS
# ---------------------------------------------------------
  if [ `ls $FUNCTIONSHERE 2>/dev/null | wc -l` -gt 0 ];then

   FID=`date +%s%N`
 # ATTACH AND MARK FUNCTIONS
   echo "#  -- ${FID} -- START" >> $FUNCTIONS
   cat  $FUNCTIONSHERE          >> $FUNCTIONS
   echo "#  -- ${FID} -- END"   >> $FUNCTIONS
   FUNCTIONSADDED="YES"
 # SAVE FUNCTION ID (AS VARIABLE MAY BE OVERWRITTEN)
   echo $FID >> ${TMPID}.fid
   fi
   else
   FUNCTIONSADDED="NO"
  fi

# MAKE QR REFERENCE
# --------------------------------------------------------
  mkqr $*
  QRIDINC=$QRID
  write2src "HEREQR$QRIDINC"

# PROCESS INPUT !!!!!
# --------------------------------------------------------
  mdsh2src $*

# ADD REFERENCE IF NOT SKIPPED
# --------------------------------------------------------
  if [ X"$SKIP"   != "XYES" ] &&
     [ Y"$RUN"    == "YYES" ] &&
     [ X"$QRMODE" != "XOFF" ]; then
       sed -i "s,HEREQR$QRIDINC,\\\qrmargin{$QRPDF}{$QRTXT}," \
               $SRCDUMP
  else
       sed -i "/^HEREQR${QRIDINC}$/d" $SRCDUMP
  fi

  sed -i "/^HEREQR.*$/d" $SRCDUMP # EMERGENCY REMOVE

# REMOVE ADDED FUNCTIONS
# --------------------------------------------------------
  if [ -f ${TMPID}.fid ]; then

# LOAD LATEST FUNCTION ID
  FID=`tail -n 1 ${TMPID}.fid`
# REMOVE FROM FUNCTIONS
  sed -i "/${FID} -- START$/,/${FID} -- END$/d" ${FUNCTIONS}
# REMOVE FROM SAVED FUNCTIONS
  sed -i "/$FID/d" ${TMPID}.fid
# RELOAD FUNCTIONS
  source $FUNCTIONS
  
  fi
  
  echo "INCLUDE ENDS  ======================================================"
}












# --------------------------------------------------------------------------- #

function SRC() {

 #write2src "link: $*"
 #echo "link: $*"
  sleep 0 
 
}

# --------------------------------------------------------------------------- #
# INJECT WHATEVER

function INJECT() {

   write2src "$*"

}
# --------------------------------------------------------------------------- #
# INJECT TEX CODE

function TEXINJECT() {

   write2src "$*"

}

# --------------------------------------------------------------------------- #
# CREATE AND INSERT PAGE SPREAD (SPECIFIC SRC)

function SPREAD() {

  SVGSRC=`echo $* | sed 's/ /\n/g'    | # SPACES TO NEWLINES
          grep "\.svg$" | head -n 1`    # SELECT FIRST ENDING WITH .pdf 
   PAGES=`echo $* | sed "s/#/\n#/g"   | # HASH TO NEWLINES
          grep -v "^#"                | # 
          sed 's/ /\n/g'              | #
          sed "/[^0-9\\-]/d"          | # NO LINES WITH MORE THAN NUMS AND -
          grep -v "^[ ]*$" | tail -n 1` # 
  if [ `echo $PAGES | wc -c` -le 1 ]; then
        PAGES=-
  else
        P1=`echo $PAGES | cut -d "-" -f 1`
        if [ `python -c "print $P1 / 2.0" | #
              cut -d "." -f 2` -lt 5 ]; then
             #echo "page is even"
              PAGECOMMAND="\cleartoright"
        else
             #echo "page is odd"
              PAGECOMMAND="\cleartoleft"
        fi
  fi
  
  if [ X"$QRMODE" != XOFF  ]; then
          mkqr $*
          write2src "\newpage"
          QROVERLAY="\qroverlay{$QRPDF}{$QRTXT}" 
  else
          QROVERLAY="" 
  fi

     PDF=${TMPID}`echo $SVGSRC | md5sum | cut -c 1-4`.pdf
  SVGTMP=${TMPID}`echo $SVGSRC | md5sum | cut -c 1-4`.svg
   MACRO="% something went wrong with $SVGSRC"

  if [ -f $PDF ]; then

       echo "$PDF exists"
       MACRO="\spread{$PDF}{$PAGES}{$PAGECOMMAND$QROVERLAY}"
  else

  ISSVG=`echo $SVGSRC | grep "\.svg$" | wc -l`
  if [ $ISSVG -gt 0 ]; then

    getFile $SVGSRC $SVGTMP
    echo $PDF

    if [ "X$SUCCESS" == "XYES" ]; then

    svglayers2pdfpages $SVGTMP $PDF

  # ----------------------------------------------------------------------- #
  # INCLUDE IN DOCUMENT
  # ----------------------------------------------------------------------- #
    MACRO="\spread{$PDF}{$PAGES}{$PAGECOMMAND$QROVERLAY}"

  # ----------------------------------------------------------------------- #
  # CLEAN UP 
  # ----------------------------------------------------------------------- #
  # rm ${SPRTMP} ${TMPID}_*.pdf $SVGTMP

   fi
  fi
 fi

 write2src "$MACRO"

}

# --------------------------------------------------------------------------- #

function TITLE() {

  NBSPACE="N${RANDOM}B"

  echo -e "\n\n\n\n" >> $SRCDUMP
  echo "$*" | # KEEP (MULTIPLE) SPACES
  sed -e "s/\([a-zA-Z_*]\)\( \)\([a-zA-Z_*]\)/\1 $NBSPACE \3/g" | #
  pandoc -r markdown -w latex | #
  sed ':a;N;$!ba;s/\n/ /g'      | #      
  sed "s/[ ]*${NBSPACE}[ ]*/~/g"  | #
  sed 's/^/\\chapter{/' | sed 's/$/}/' >> $SRCDUMP
  write2src ""

}

# --------------------------------------------------------------------------- #

function SCALEFONT() {

  write2src "\relscale{$1}"

}

# --------------------------------------------------------------------------- #

function RESETFONT() {

  write2src "\resetfont"

}

# --------------------------------------------------------------------------- #

function PDF() {

  PDFSRC=`echo $* | sed 's/ /\n/g'    | # SPACES TO NEWLINES
          grep "\.pdf$" | head -n 1`    # SELECT FIRST ENDING WITH .pdf 
   PAGES=`echo $* | sed "s/#/\n#/g"   | # HASH TO NEWLINES
          grep -v "^#"                | # 
          sed 's/ /\n/g'              | #
          sed "/[^0-9\\-]/d"          | # NO LINES WITH MORE THAN NUMS AND -
          grep -v "^[ ]*$" | tail -n 1` # 
  if [ `echo $PAGES | wc -c` -le 1 ]; then
        PAGES=-
  fi
  OPTIONS=`echo $* | sed "s/#/\n#/g"          | #
           grep "^#" | tail -n 1              | #
           cut -d "#" -f 2 | sed 's/^[ \t]*//'` # 
  if [ `echo $OPTIONS | wc -c` -gt 1 ]; then
        OPTIONS=",$OPTIONS"
  else
        echo "no options provided"
  fi

  PDFGET=${TMPID}`echo $PDFSRC | md5sum | cut -c 1-4`.pdf
  if [ ! -f $PDFGET ]; then
        getFile $PDFSRC $PDFGET
      # TODO/MAYBE: MAKE PDF-X CONFORM
  else
     echo "no need to download"
    #sleep 2
  fi
  if [ -f $PDFGET ]; then
     if [ X"$QRMODE" != XOFF  ]; then
          mkqr $*
          write2src "\newpage"
          write2src "\qroverlay{$QRPDF}{$QRTXT}" 
     fi
         #write2src "\includepdf[scale=1,pages=$PAGES$OPTIONS]{$PDFGET}"
          write2src "\pdfpage{$PDFGET}{$PAGES}{$OPTIONS}"
  fi

}

# --------------------------------------------------------------------------- #

function SRCODE() {

  SRCSRC=`echo $* | sed 's/ /\n/g'         | # SPACES TO NEWLINES
          sed "/\.functions$/s/^/XXX/g"    | # MARK LINES WITH .functions EXTENSION
          sed "/\.[a-z]\{2,4\}$/s/^/XXX/g" | # MARK LINES WITH 2-4 CHARACTER EXTENSION
          grep "^XXX" | sed 's/^XXX//'     | # SELECT AND REMOVE MARK
          head -n 1`                         # SELECT FIRST
   LINES=`echo $* | sed "s/ /\n/g" | # SPACES TO NEWLINES
          sed "/[^0-9\\-]/d"       | # NO LINES WITH MORE THAN NUMS AND -
          tail -n 1`                 # LAST LINE ONLY
  if [ `echo $LINES | wc -c` -gt 1 ]; then      # IF LINE OPTION IS SET
        echo "lines: $LINES"
        LINES=`echo $LINES | sed 's/-/,/'`
        SELECTSRCLINES="sed -n \"${LINES}p\" "
  else
        SELECTSRCLINES="tee"
  fi

  EXTENSION=`echo $SRCSRC | rev | cut -d "." -f 1 | rev`
  if   [ "X$EXTENSION" == "Xsh" ]; then
          LSTSET="\lstsetBash"
  elif [ "X$EXTENSION" == "Xfunctions" ]; then
          LSTSET="\lstsetBash"
  elif [ "X$EXTENSION" == "Xtex" ]; then
          LSTSET="\lstsetTeX"
  elif [ "X$EXTENSION" == "Xsty" ]; then
          LSTSET="\lstsetTeX"
  else
          LSTSET="\lstReset"
  fi

  SRCGET=${TMPID}SRC`echo $SRCSRC | md5sum | cut -c 1-3`.$EXTENSION

  if [ ! -f $SRCGET ]; then
        getFile $SRCSRC $SRCGET
  else
     echo "no need to download"
    #sleep 2
  fi
  if [ -f $SRCGET ]; then

    if [ X"$QRMODE" != XOFF  ]; then
     mkqr $*
     write2src "\qrmargin{$QRPDF}{$QRTXT}"
    fi

    INDENT=`cat $SRCGET            | # DISPLAY SRC
            eval "$SELECTSRCLINES" | # SELECT LINES
            sed '/^[ \t]*$/g'      | # IGNORE EMPTY LINES
            sed -E 's/([^ ]).*//'  | # KEEP ONLY LEADING BLANK
            sort -r                | # REVERESE SORT
            tail -n 1              | # SELECT LAST (=SHORTEST)
            wc -c`                   # COUNT

     write2src "$LSTSET"
     write2src "\begin{lstlisting}"
     cat $SRCGET                        | #
     eval "$SELECTSRCLINES"             | #
     cut -c ${INDENT}-                  | #
     sed 's/^[ \t]*$/°\\emptylinelst°/' | # REPLACE EMPTY LINES WITH COMMAND
     tee                    >> $SRCDUMP
     write2src "\end{lstlisting}"
  fi

}

# --------------------------------------------------------------------------- #

function QUAVERBATIM() {

  # TODO: NOT WORKING FOR TWO PERIODS IN FILENAME?

 #LPRTCT="Y"
  SPRTCT=SP`echo $RANDOM | cut -c 1-4`CE
  BPRTCT=BR`echo $RANDOM | cut -c 1-4`AK

  TXTSRC=`echo $* | sed 's/ /\n/g'         | # SPACES TO NEWLINES
          sed "/\.[a-z]\{2,4\}$/s/^/XXX/g" | # MARK LINES WITH 2-4 CHARACTER EXTENSION
          grep "^XXX" | sed 's/^XXX//'     | # SELECT AND REMOVE MARK
          head -n 1`                         # SELECT FIRST
   LINES=`echo $* | sed "s/ /\n/g" | # SPACES TO NEWLINES
          sed "/[^0-9\\-]/d"       | # NO LINES WITH MORE THAN NUMS AND -
          tail -n 1`                 # LAST LINE ONLY
  if [ `echo $LINES | wc -c` -gt 1 ]; then      # IF LINE OPTION IS SET
        echo "lines: $LINES"
        LINES=`echo $LINES | sed 's/-/,/'`
        SELECTSRCLINES="sed -n \"${LINES}p\" "
  else
        SELECTSRCLINES="tee"
  fi

  TXTGET=${TMPID}SRC`echo $TXTSRC | md5sum | cut -c 1-3`.txt

  if [ ! -f $TXTGET ]; then
        getFile $TXTSRC $TXTGET
  else
     echo "no need to download"
  fi
  if [ -f $TXTGET ]; then

    if [ X"$QRMODE" != XOFF  ]; then
     mkqr $*
     write2src "\qrmargin{$QRPDF}{$QRTXT}"
    fi

     cat $TXTGET                     | #
     eval "$SELECTSRCLINES"          | #
     sed "s/ /$SPRTCT/g"             | #
    #sed "s/^[ \t]*$/$LPRTCT/g"      | #
     sed ":a;N;\$!ba;s/\n/$BPRTCT/g" | #
     tee                             > super.tmp

     write2src "\begin{quaverbatim}"
     mdsh2src super.tmp
     write2src "\end{quaverbatim}"

     sed -i "s/$BPRTCT/\n/g" $SRCDUMP
     sed -i "s/$SPRTCT/ /g" $SRCDUMP


  fi

}

# --------------------------------------------------------------------------- #

function WERBATIM() {

 # TODO: DE-ANONYMIZE EMAIL
 # !! COPIED FROM QUAVERBATIM

  SPRTCT=SP`echo $RANDOM | cut -c 1-4`CE
  BPRTCT=BR`echo $RANDOM | cut -c 1-4`AK
  TXTSRC=`echo $* | sed 's/ /\n/g'         | # SPACES TO NEWLINES
          sed "/\.[a-z]\{2,4\}$/s/^/XXX/g" | # MARK LINES WITH 2-4 CHARACTER EXTENSION
          grep "^XXX" | sed 's/^XXX//'     | # SELECT AND REMOVE MARK
          head -n 1`                         # SELECT FIRST
   LINES=`echo $* | sed "s/ /\n/g" | # SPACES TO NEWLINES
          sed "/[^0-9\\-]/d"       | # NO LINES WITH MORE THAN NUMS AND -
          tail -n 1`                 # LAST LINE ONLY
  if [ `echo $LINES | wc -c` -gt 1 ]; then      # IF LINE OPTION IS SET
        echo "lines: $LINES"
        LINES=`echo $LINES | sed 's/-/,/'`
        SELECTSRCLINES="sed -n \"${LINES}p\" "
  else
        SELECTSRCLINES="tee"
  fi

  TXTGET=${TMPID}SRC`echo $TXTSRC | md5sum | cut -c 1-3`.txt
  if [ ! -f $TXTGET ]; then
        getFile $TXTSRC $TXTGET
  fi

  if [ -f $TXTGET ]; then

    INDENT=`cat $TXTGET            | # DISPLAY SRC
            eval "$SELECTSRCLINES" | # SELECT LINES
            sed '/^[ \t]*$/g'      | # IGNORE EMPTY LINES
            grep -v "^$"           | # IGNORE EMPTY LINES (SOLVE DOS NEWLINE PROBLEM?)
            sed -E 's/([^ ]).*//'  | # KEEP ONLY LEADING BLANK
            sort -r                | # REVERESE SORT
            tail -n 1              | # SELECT LAST (=SHORTEST)
            wc -c`                   # COUNT
    if [ $INDENT -lt 1 ]; then INDENT=1; fi

    if [ X"$QRMODE" != XOFF  ]; then
     mkqr $*
     write2src "\qrmargin{$QRPDF}{$QRTXT}"
    fi

     write2src "\begin{werbatim}"
     cat $TXTGET                     | #
     eval "$SELECTSRCLINES"          | #
     cut -c ${INDENT}-               | #
     tee                             >> $SRCDUMP
     write2src "\end{werbatim}"

  fi
}

# --------------------------------------------------------------------------- #

function NEWPAGE(){

  write2src "\newpage"
}

# --------------------------------------------------------------------------- #

function VFILL(){

  write2src "\vfill"
}

# --------------------------------------------------------------------------- #

function BIGSKIP(){

  write2src "\bigskip"
}

# --------------------------------------------------------------------------- #

function MEDSKIP(){

  write2src "\medskip"
}

# --------------------------------------------------------------------------- #

function SMALLSKIP(){

  write2src "\smallskip"
}

# --------------------------------------------------------------------------- #

function EMPTYPAGE(){

  write2src "\emptypage"
}

# --------------------------------------------------------------------------- #

function CLEARTORIGHT(){

  write2src "\cleartoright"
}

# --------------------------------------------------------------------------- #

function CLEARTOLEFT(){

  write2src "\cleartoleft"
}

# --------------------------------------------------------------------------- #

function FLUSHLOG(){

  write2src "\begin{logfile}"
  write2src "\textbf{Network Activity:}"

  cat $WGETLOG              | #
  tr -d '\015'              | # CONVERT DOS END OF LINE (IN WGET -d MODE)
  tr -s ' '                 | # SQUEEZE CONSECUTIVE SPACES
  sed "s/-/{-}/g"           | #
  sed "s/_/\\\\_/g"         | #
  sed "s/%/\\\\%/g"         | #
  grep -v '\.\.\.\.\.\..*s$'| # IGNORE PROCESS LINES
  grep -v "^Saving"         | #
  grep -v " saved "         | #
  grep -v "^$"              | #
  sed "s/ /~/g"             | #
 #sed "s/ / \\\\hfill~/g"   | #
  sed "s/^/\\\\seqsplit{/g" | #
  sed "s/$/}/g"             | #
  tee                       >> $SRCDUMP

  write2src "\end{logfile}"
  write2src "\bigskip"

  rm $WGETLOG

}

# --------------------------------------------------------------------------- #

function FLUSHQRURLS(){

  write2src "\bigskip"
  write2src "URLS:"
  write2src ""

  for SHORTURL in `cat $QRURLLOG`
   do
     LONGURL=`curl -sIL $SHORTURL         | # CURL URL
              tr -d '\015'                | # CONFORM DOS END OF LINE
              grep ^Location              | # SELECT LOCATION
              cut -d ":" -f 2-            | # CUT SECOND FIELD
              tail -n 1                   | # SELECT LAST LINE
              sed 's,[ \t]*,,'            | # REMOVE ALL SPACES
              sed 's,/$,,'                | # REMOVE TRAILING SLASH
              sed "s,^${SHORTURLBASE}$,,"`  # DELETE SHORTURLBASE ONLY
     if [ `echo $LONGURL | wc -c` -ge 2 ]; then
           write2src "$SHORTURL -> $LONGURL"
      else
           write2src "$SHORTURL NOT SET!"
     fi
  done

}

# --------------------------------------------------------------------------- #

function INFO(){

  REFCODE=`echo $1 | sed 's/ //g' | sed "s,$SHORTURLBASE/,,g"`

  IFHTTP=`echo $REFCODE | grep "http.\?://" | wc -l`
  if [ $IFHTTP -ge 1 ]; then

       INFOSRC="$REFCODE"
       INFOGET=${TMPID}`echo $REFCODE | md5sum | cut -c 1-4`.info
       echo "NOT SHORTURLED: $INFOSRC"
  else
       SHORTURL="${SHORTURLBASE}/${REFCODE}"
        LONGURL=`curl -sIL $SHORTURL         | # CURL URL
                 tr -d '\015'                | # CONFORM DOS END OF LINE
                 grep ^Location              | # SELECT LOCATION
                 cut -d ":" -f 2-            | # CUT SECOND FIELD
                 tail -n 1                   | # SELECT LAST LINE
                 sed 's,[ \t]*,,'            | # REMOVE ALL SPACES
                 sed 's,/$,,'                | # REMOVE TRAILING SLASH
                 sed "s,^${SHORTURLBASE}$,X,"` # DELETE SHORTURLBASE ONLY (-> PRODUCE 404)
       INFOSRC="${LONGURL}/info.txt"
       INFOGET=${TMPID}`echo $LONGURL | md5sum | cut -c 1-4`.info
  fi

 #echo "SHORTURL: $SHORTURL";echo "LONGURL: $LONGURL";echo "INFOSRC: $INFOSRC"

  LHERE=L`echo $RANDOM | cut -c 1-3`N ; BHERE=B`echo $RANDOM | cut -c 1-3`R

  if [ ! -f $INFOGET ]; then
      getFile "$INFOSRC" "$INFOGET"
  else
     echo "No need to download!"
  fi

  if [ X$SUCCESS == XYES ]; then

     write2src "\marginpar{\begin{margininfo}"

     for SECTION in SHORT_INFO
    #for SECTION in SHORT_INFO LICENSE COPYRIGHT_HOLDER
      do
       SECTION=`echo $SECTION | sed 's/_/ /g'`
       cat $INFOGET                | # USELESS USE OF CAT
       sed "s/^%.*$//"             | # REPLACE COMMENTS WITH EMPTY LINE
       sed -e :a \
           -e '$!N;s/\n[ \t]*=/ /;ta' \
           -e 'P;D'                | # APPEND UNDERLINE TO PREVIOUS LINE
       sed -n "/${SECTION}[ \t]*=*$/,\$p" | # PRINT FROM REGEX TO END OF FILE
       sed "s/^[ \t]*$/$LHERE/g"   | # REMOVE EMPTY LINES
       sed "/=\?=$/s/^/\n/"        | # ADD NEWLINE AT START IF ENDS WITH ==
       sed  '1,/^$/!d'             | # FIRST PARAGRAPH ONLY
       grep -v "^[ \t]*$SECTION[ \t]*=*$" | # IGNORE SECTION LINES
       sed ':a;N;$!ba;s/\n/ /g'    | # REMOVE LINEBREAKS
       sed "s/$/$BHERE/"           | # PROTECT LINEBREAKS HERE
       pandoc -r markdown -w latex | # FROM MARKDOWN TO LATEX
       sed ':a;N;$!ba;s/\n/ /g'    | # REMOVE LINEBREAKS
       sed "s/$BHERE/\n/g"         | # RESTORE LINEBREAKS
       sed "s/$LHERE/ /g"          | # RESTORE EMPTY LINES
       sed 's/ /\n/g'              | #
       sed -e '/^http.\{20\}/s/^/\\urlsplit{/' \
           -e '/^\\urlsplit/s/$/}/'| #
       sed -e '/^http:\/\//s/^/\\urlf{/' \
           -e '/^\\urlf/s/$/}/'| #
       tee  >> $SRCDUMP              # WRITE TO FILE
       write2src ""                  # EMPTY LINE

     done
       write2src "\end{margininfo}\vspace{1cm}}"
  else
       echo "file does not exist"
  fi

}

# --------------------------------------------------------------------------- #

function TABLEOFCONTENTS(){

  write2src "\cleardoublepage"
  write2src "\setcounter{tocdepth}{0}"
  write2src "\tableofcontents"
  write2src "\newpage"
}

# --------------------------------------------------------------------------- #

function TOCITEM(){

  TOCTITLE=`echo $* | pandoc -r markdown -w latex`

  if [ `echo $TOCTITLE | grep ":" | wc -l` -gt 0 ]; then
  F1=`echo $TOCTITLE | cut -d ":" -f 1`
  F2=`echo $TOCTITLE | cut -d ":" -f 2-`
  TOCTITLE="\underline{\textsc{$F1}}: $F2"
  fi



  write2src "\addcontentsline{toc}{chapter}{$TOCTITLE}"

}

# --------------------------------------------------------------------------- #

function KEYWORDEX() {

  # KEYWORDIFY?

  KEYWORDS=$1

}

# --------------------------------------------------------------------------- #

function REF() {

  REFID=`echo $*             | # WHAT? 
         sed 's/^[ \t]*//'   | # REMOVE LEADING WHITESPACE
         sed 's/[ \t]*$//'   | # REMOVE TRAILING WHITESPACE
         md5sum | cut -c 1-10` # CREATE UNIQUE ID
          
 #write2src "place $REFID"
  write2src "\label{$REFID}"

}

# --------------------------------------------------------------------------- #


function REFREF() {

  REFID=`echo $*             | # WHAT? 
         sed 's/^[ \t]*//'   | # REMOVE LEADING WHITESPACE
         sed 's/[ \t]*$//'   | # REMOVE TRAILING WHITESPACE
         md5sum | cut -c 1-10` # CREATE UNIQUE ID
          
 #write2src "reference to $REFID"
 #write2src "(\P \ding{220} ~ p.\pageref{$REFID})"
  write2src "(\ding{222} p. \pageref{$REFID})"

}

# --------------------------------------------------------------------------- #

function BY(){

  write2src "{\by{$*}}"

}

# --------------------------------------------------------------------------- #

function LICENSE(){

  LICENSE=`echo $* | cut -d " " -f 1`
  VERSION=`echo $* | cut -d " " -f 2 | cut -d "(" -f 2 | cut -d ")" -f 1`

 #LNAME="${LICENSE}_${VERSION}"
  LNAME=`echo $* | #
         sed 's/[ ]*(/_/g' | #
         sed 's/)//g' | #
         sed 's,[ ]*/[ ]*,_,g'`
  LID=`echo $LNAME | md5sum | cut -c 1-6`


  BADGESRC=EDIT/151025_licenses.svg
  BADGEPDF=${TMPID}${LID}`echo $RANDOM | cut -c 1-2`.pdf

# SELECT LAYERS: ONE FOR EACH UNIQUE NAME
# ---------------------------------------------------------------------------- #
  sed ":a;N;\$!ba;s/\n/ /g" $BADGESRC   | # REMOVE ALL LINEBREAKS
  sed 's/<g/\n<g/g'                     | # RESTORE GROUP OPEN + NEWLINE
  sed '/groupmode="layer"/s/<g/4Fgt7R/g'| # PLACEHOLDER FOR LAYERGROUP OPEN
  sed ':a;N;$!ba;s/\n/ /g'              | # REMOVE ALL LINEBREAKS
  sed 's/4Fgt7R/\n<g/g'                 | # RESTORE LAYERGROUP OPEN + NEWLINE
  sed 's/display:none/display:inline/g' | # MAKE VISIBLE EVEN WHEN HIDDEN
  tee head.tmp                          | # DUMP NOW TO EXTRACT HEAD LATER
  tail -n +2                            | # REMOVE HEAD (=FIRST LINE)
  sed 's/<\/svg>//g'                    | # REMOVE CLOSING TAG
  grep -n ""                            | # NUMBER LINES
  sed "s/^.*$/&|&/g"                    | # DOUBLE CONTENT FOR ANALYSIS
  sed "s/:label/\nX1X/"                 | # MARK LABEL (=NAME)
  grep -v ":label=\"XX_"                | # IGNORE XX LAYERS
  grep  "^X1X"                          | # SELECT MARKED
  egrep ":label=\"$LNAME|:label=\"DEKO" | #
  shuf                                  | # SHUFFLE
  sort -u -t\" -k1,2                    | # SELECT ONE FOR EACH LABEL
  cut -d "|" -f 2-                      | # SELECT SECOND/UNTOUCHED CONTEN
  sort -n -u -t: -k1,1                  | # SORT ACCORDING TO LINE NUMBER
  cut -d ":" -f 2-                      | # REMOVE LINENUMBER
  tee  > layers.tmp                       # WRITE TO FILE
# ---------------------------------------------------------------------------- #

  head -n 1 head.tmp  >  ${TMPID}ll.svg
  cat layers.tmp      >> ${TMPID}ll.svg
  echo '</svg>'       >> ${TMPID}ll.svg
  inkscape --export-pdf=$BADGEPDF \
           ${TMPID}ll.svg
  rm ${TMPID}ll.svg head.tmp layers.tmp

  LREF=""
  for L in `echo $* | #
            sed 's/[ ]*(/_/g' | #
            sed 's/)//g' | #
            sed 's,[ ]*/[ ]*,\n,g' | #
            sort -u`
   do
      LID=`echo $L | md5sum | cut -c 1-6`
      LREF="${LREF},\pageref{$LID}"
  done

  LREF=`echo $LREF | sed 's/^,//'`

  write2src "\qrmargin{$BADGEPDF}{sfs}"
  write2src "\marginpar{\begin{marginlicenseblock}"
  write2src "{\relscale{.7}\ding{222}\relscale{1.2} p.${LREF}~}"
  write2src "\end{marginlicenseblock}\vspace{.8cm}}"

  echo $* | #
  sed 's/[ ]*(/_/g' | #
  sed 's/)//g' | #
  sed 's,[ ]*/[ ]*,\n,g' >> $TMPID.licenses

}

# --------------------------------------------------------------------------- #

function FLUSHLICENSES(){

   GITBASEURL="https://github.com/christop/licenses/raw"

 #      FAL_1.3:d31e37d/pdf/FAL_1.3.pdf
 #      GPL_2.0:07f63bc/pdf/GPL_2.0.pdf
 #      GPL_3.0:407d3a2/pdf/GPL_3.0.pdf
 #     GFDL_1.2:2f159f8/pdf/GFDL_1.2.pdf
 #     GFDL_1.3:8c8aeae/pdf/GFDL_1.3.pdf
 # CC-BY-SA_2.5:3cea07b/pdf/CC-BY-SA_2.5.pdf
 # CC-BY-SA_3.0:362006e/pdf/CC-BY-SA_3.0.pdf

    write2src "\emptypage"
    write2src "\cleartoright"

    for LNAME in `cat $TMPID.licenses | sort -u`
     do
        LPDFURL=$GITBASEURL/`grep $LNAME $FUNCTIONS | #
                             tail -n 1 | cut -d ":" -f 2-`
        LID=`echo $LNAME | md5sum | cut -c 1-6`
        OPTIONS=",scale=.9,offset=15 5"
        getFile $LPDFURL ${TMPID}${LID}.pdf
     if [ -f ${TMPID}${LID}.pdf ]; then
        write2src "\cleartoright"
        write2src "\pdfpageplus{${TMPID}${LID}.pdf}{1}{$OPTIONS}{\label{$LID}}"
     fi
   done

}


# --------------------------------------------------------------------------- #

function MKSIDENOTE(){

   SISEP="% --------------"
  
   SISEPNUM=`grep -n "$SISEP" $SRCDUMP | #
             tail -n 1                 | #
             cut -d ":" -f 1`

   sed "1,${SISEPNUM}d" $SRCDUMP | # PRINT FROM LINENUM TO END
   grep -v "^% MKSIDEBAR"        | #
   sed "s/%//"                   | #
   sed "s/^[ ]*//"               | # REMOVE ALL LEADING BLANKS (= PROBLEM FOR INDENTED CODE)
   sed 's/_/\\_/g'               | # PROTECT _ (= NO VERT MODE)
   sed -e '/^http.\{20\}/s/^/\\urlsplit{/' \
       -e '/^\\urlsplit/s/$/}/'| #
   sed -e '/^http:\/\//s/^/\\urlf{/' \
       -e '/^\\urlf/s/$/}/'| #
   tee                           > super.tmp

   write2src "\marginpar{\begin{marginblock}"
   mdsh2src super.tmp
   write2src "\end{marginblock}\vspace{.8cm}}"
   write2src "\vspace{-1\baselineskip}"
 
   rm super.tmp
}

# --------------------------------------------------------------------------- #

function SUPERIMPOSE() {

  SVGSRC=`echo $* | sed 's/ /\n/g'    | # SPACES TO NEWLINES
          grep "\.svg$" | head -n 1`    # SELECT FIRST ENDING WITH .pdf 
   PAGES=`echo $* | sed "s/#/\n#/g"   | # HASH TO NEWLINES
          grep -v "^#"                | # IGNORE LINES STARTING WITH HASH
          sed 's/ /\n/g'              | # SPACES TO NEWLINES
          sed "/[^0-9\\-]/d"          | # NO LINES WITH MORE THAN NUMS AND -
          grep -v "^[ ]*$" | tail -n 1` # IGNORE EMPTY LINES, TAKE LAST MATCH
  if [ `echo $PAGES | wc -c` -le 1 ]; then
        PAGES=1
  fi

  P1=`echo $PAGES | cut -d "-" -f 1`
  P2=`echo $PAGES | cut -d "-" -f 2`

     PDF=${TMPID}`echo $SVGSRC | md5sum | cut -c 1-4`.pdf
  SVGTMP=${TMPID}`echo $SVGSRC | md5sum | cut -c 1-4`.svg
   MACRO="% something went wrong with $SVGSRC"

    if [ -f $PDF ]; then
      #echo "$PDF exists"
       MACRO="\superimpose{$PDF}{$P1}{$P2}"
  else

  ISSVG=`echo $SVGSRC | grep "\.svg$" | wc -l`
  if [ $ISSVG -gt 0 ]; then

    getFile $SVGSRC $SVGTMP
    echo $PDF

    if [ "X$SUCCESS" == "XYES" ]; then

    svglayers2pdfpages $SVGTMP $PDF

  # ----------------------------------------------------------------------- #
  # INCLUDE IN DOCUMENT
  # ----------------------------------------------------------------------- #
    MACRO="\superimpose{$PDF}{$P1}{$P2}"

   fi
  fi
 fi

 write2src "$MACRO"

}

# --------------------------------------------------------------------------- #

function PDFASAP() {

  SVGSRC=`echo $* | sed 's/ /\n/g'    | # SPACES TO NEWLINES
          grep "\.svg$" | head -n 1`    # SELECT FIRST ENDING WITH .pdf 
   PAGES=`echo $* | sed "s/#/\n#/g"   | # HASH TO NEWLINES
          grep -v "^#"                | # 
          sed 's/ /\n/g'              | #
          sed "/[^0-9\\-]/d"          | # NO LINES WITH MORE THAN NUMS AND -
          grep -v "^[ ]*$" | tail -n 1` # 
  if [ `echo $PAGES | wc -c` -le 1 ]; then
        PAGES=1
  else
        P1=`echo $PAGES | cut -d "-" -f 1`
  fi

     PDF=${TMPID}`echo $SVGSRC | md5sum | cut -c 1-4`.pdf
  SVGTMP=${TMPID}`echo $SVGSRC | md5sum | cut -c 1-4`.svg
   MACRO="% something went wrong with $SVGSRC"

  if [ -f $PDF ]; then

       echo "$PDF exists"
       MACRO="\fullpagefloat{$PDF}{$P1}"

  else

  ISSVG=`echo $SVGSRC | grep "\.svg$" | wc -l`
  if [ $ISSVG -gt 0 ]; then

    getFile $SVGSRC $SVGTMP
    echo $PDF

    if [ "X$SUCCESS" == "XYES" ]; then

    svglayers2pdfpages $SVGTMP $PDF

  # ----------------------------------------------------------------------- #
  # INCLUDE IN DOCUMENT
  # ----------------------------------------------------------------------- #
    MACRO="\fullpagefloat{$PDF}{$P1}"

   fi
  fi
 fi

 write2src "$MACRO"

}

# --------------------------------------------------------------------------- #

function RESETALL() {
  write2src "\resetall"
}
# --------------------------------------------------------------------------- #

function SWAP(){ 
 
  FROM=`echo $* | cut -d " " -f 1   | # 
        sed 's/ //g' | sed 's/"//g' | sed 's/\\\/\\\\\\\/g'` 
    TO=`echo $* | cut -d " " -f 2   | # 
        sed 's/ //g' | sed 's/"//g' | sed 's/\\\/\\\\\\\/g'` 
   
  # tac $SRCDUMP              | # 
  # sed -n "/$INCLUDEID/,\$p" | # 
  # tac  > ${SRCDUMP}.tmp 
 
  # cat $SRCDUMP | # 
  # sed -n "/$INCLUDEID/,\$p" | # 
  # sed '1d' | # 
  # sed "s/$FROM/$TO/g" >> ${SRCDUMP}.tmp 
 
  # mv ${SRCDUMP}.tmp $SRCDUMP 

   sed -i "s/\b$FROM\b/$TO/g" ${SRCDUMP}

}

# --------------------------------------------------------------------------- #
 
